
snippet tde "typedef enum block" b
typedef enum ${1:name_t}
{
    $2
} $1;
endsnippet

snippet db "DEBUG()"
DEBUG("$1");
endsnippet

snippet sw "switch statement"
switch (${1:/* var/enum */})
{
${4:/* use "cs" snippet for cases */}
default:
    ${3:/* TODO (msk): log/error */}
    break;
}
endsnippet

snippet cs "case statement"
case $1:
    $2
    break;
endsnippet

snippet ift "/* intentional fall-through */"
/* intentional fall-through */
endsnippet

snippet eli "else if (/* condition */) \n {/* code */}"
else if (${1:/* condition */})
{
    $2
}
endsnippet

snippet tds "structure typedef" b
typedef struct ${1:name_t}
{
    $2
} $1;
endsnippet

snippet list "Create a list" b
typedef struct ${1:`!p snip.rv = (snip.basename or "name")`}${2:_list_t}
{
    ${3:/* members */}
    struct $1$2 *p_next;
} $1$2;
endsnippet

snippet TD "Add TODO reminder"
/* TODO (msk): ${1:log/error} */
endsnippet

snippet cclf "New function declaration/definition" b
/*----------------------------------------------------------------------------*
 *  NAME
 *      ${1:`!p snip.rv = snip.basename + "_"`}${2:fun_name}
 *
 *  DESCRIPTION
 *      ${3:TODO: description}
 *
 *  RETURNS
 *      (${4:void}) ${5:Nothing}
 *
 *----------------------------------------------------------------------------*/
${6:static }$4 $1$2(${7:void})`!p
header = (snip.fn.replace(snip.basename,'') == '.h')
if not header:
    snip.shift()
    snip.rv = '\n{\n' + snip.mkline('', None)`${8:`!p
if header:
    snip.rv = ';'`}`!p
if not header:
    snip.rv = '\n}'`
endsnippet

snippet cclc "Generate a c source file in CCL style" b
/******************************************************************************
 *  (C) COPYRIGHT Cambridge Consultants Ltd 2014
 *
 *  CCL Project Reference P${1}
 *
 *  FILE
 *      \$Revision: \$
 *      \$Author: \$
 *      \$Date: \$
 *
 *  ORIGINAL AUTHOR
 *      ${2:Matt Kingston}
 *
 *  DESCRIPTION
 *      ${3}
 *
 *  REFERENCES
 *      ${4:None}
 *
 ******************************************************************************/

/*============================================================================*
    C & System-wide Header Files
 *============================================================================*/
/* None */

/*============================================================================*
    Interface Header Files
 *============================================================================*/
/* None */

/*============================================================================*
    Local Header Files
 *============================================================================*/
${5:#include "`!p snip.rv = snip.basename + '.h'`"}

/*============================================================================*
    Private Defines
 *============================================================================*/
${6:/* None */}

/*============================================================================*
    Private Data Types
 *============================================================================*/
${7:/* None */}

/*============================================================================*
    Private Data
 *============================================================================*/
${8:/* None */}

/*============================================================================*
    Private Function Declarations
 *============================================================================*/
${9:/* None */}

/*============================================================================*
    Public Function Implementations
 *============================================================================*/
${10:/* None */}

/*============================================================================*
    Private Functions
 *============================================================================*/
${11:/* None */}

/*============================================================================*
    End Of File
 *============================================================================*/

endsnippet

snippet cclh "Generate a header file in CCL style" b
/******************************************************************************
 *  (C) COPYRIGHT Cambridge Consultants Ltd 2014
 *
 *  CCL Project Reference P${1}
 *
 *  FILE
 *      \$Revision: \$
 *      \$Author: \$
 *      \$Date: \$
 *
 *  ORIGINAL AUTHOR
 *      ${2:Matt Kingston}
 *
 *  DESCRIPTION
 *      ${3}
 *
 *  REFERENCES
 *      ${4:None}
 *
 ******************************************************************************/

#ifdef  __cplusplus
extern "C" {
#endif

#ifndef ${5:`!p
snip.rv = snip.basename.upper() + '_H'
`}
#define $5

/*============================================================================*
    C & System-wide Header Files
 *============================================================================*/
/* None */

/*============================================================================*
    Interface Header Files
 *============================================================================*/
/* None */

/*============================================================================*
    Local Header Files
 *============================================================================*/
/* None */

/*============================================================================*
    Public Defines
 *============================================================================*/
/* None */

/*============================================================================*
    Public Data Types
 *============================================================================*/
/* None */

/*============================================================================*
    Public Data
 *============================================================================*/
/* None */

/*============================================================================*
    Public Functions
 *============================================================================*/
/* None */

#endif /* #ifndef $5 (include guard) */

#ifdef  __cplusplus
}
#endif

/*============================================================================*
    End Of File
 *============================================================================*/

endsnippet

snippet skel "Skeleton C file" b
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <stddef.h>

int main(int argc, char* argv[])
{
    printf("Invocation:");
    for (int i=0; i<argc; i++)
    {
        printf(" %s", argv[i]);
    }
    printf("\n");
    return 0;
}
endsnippet


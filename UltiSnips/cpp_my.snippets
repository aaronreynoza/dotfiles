extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet cl "class .. (class)" !
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
    ${1/(\w+).*/$1/} (${2:arguments});
    ${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/}& other) = delete;
    ${1/(\w+).*/$1/} (${1/(\w+).*/$1/}&& other) = delete;
    ${1/(\w+).*/$1/}& operator=(const ${1/(\w+).*/$1/}& other) = delete;
    ${1/(\w+).*/$1/}& operator=(${1/(\w+).*/$1/}&& other) = delete;
    virtual ~${1/(\w+).*/$1/} ();

private:
    ${0:/* data */}
};
endsnippet

snippet skel "Skeleton cpp file" !b
#include <iostream>

int main(int argc, char* argv[])
{
    std::cout << "Invocation: ";
    for (int i=0; i<argc; i++)
    {
        std::cout << argv[i] << " ";
    }
    std::cout << "\n";
    return 0;
}
endsnippet

snippet sc "std::cout << .."
std::cout << 
endsnippet

snippet sp "'' <<"
"$1" << 
endsnippet

snippet pnl "<< '\n';"
<< '\n';
endsnippet

snippet scnl "std::cout << '..\n';"
std::cout << "$1\n";
endsnippet

# vim:ft=snippets:
